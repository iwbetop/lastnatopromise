// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  email String @unique
  password String
  firstName String?
  lastName String?
  middleName String?
  gender Gender @default(OTHER)
  country String?
  province String?
  city String?
  street String?
  personalEmail String?
  phoneNumber String?
  birthday DateTime?
  image String?
  biography String?

  roleId String
  courseId String?
  verifiedEmail DateTime?
  onboardingStatus Boolean @default(false)
  accountStatus AccountStatus @default(ACTIVE)
  educationalStatus EducationalStatus @default(ENROLLED)

  privacy UserPrivacy @default(PUBLIC)
  
  reports Report[] @relation(name: "Reporter")
  reportsReceived Report[] @relation(name: "ReportedUser")
  role Role @relation(fields: [roleId], references: [id])
  course Course? @relation(fields: [courseId], references: [id])
  followers Follows[] @relation("following")
  following Follows[] @relation("follower")
  social SocialLink[]
  skills UserSkill[]
  educations Education[]
  projects Project[]
  achievement Achievement[]
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Role {
  id String @id @default(uuid())
  name Roles @default(USER)
  user User[] 
  permission Permission[]
}

model Permission {
  id String @id @default(uuid())
  name String
  roleId String
  role Role @relation(fields: [roleId], references: [id])
}

model Report {
  id          String  @id @default(uuid())  
  userId  String
  reportedUserId String
  reportReason String
  createdAt  DateTime @default(now())
  status      ReportStatus @default(PENDING)
  user User @relation(fields: [userId], references: [id], name: "Reporter")
  reportedUser User @relation(fields: [reportedUserId], references: [id], name: "ReportedUser")
}

model Course {
  id String @id @default(uuid())
  name String
  image String?
  user User[]
}

model SocialLink {
  id        String      @id @default(uuid())
  userId    String
  platform  SocialPlatform  @default(OTHER)
  url       String
  user User @relation(fields: [userId], references: [id])
}

model Skill {
  id String @id @default(cuid())
  name String
  users UserSkill[]
}

model UserSkill {
  id String @id @default(cuid())
  userId String
  skillId String
  category String
  user User @relation(fields: [userId], references: [id])
  skill Skill @relation(fields: [skillId], references: [id])
}

model Education {
  id String @id @default(cuid())
  name String
  startDate DateTime
  endDate DateTime
  userId String
  user User @relation(fields: [userId], references: [id])
}

model Achievement {
  id String @id @default(cuid())
  name String
  achievedDate DateTime
  description String
  userId String
  user User @relation(fields: [userId], references: [id])
}

model Project {
  id String @id @default(cuid())
  name String
  completedDate DateTime
  description String
  userId String
  user User @relation(fields: [userId], references: [id])
}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}



enum AccountStatus {
  ACTIVE
  SUSPENDED
  LOCKED
  ARCHIEVED
}

enum Roles {
  SUPERADMIN
  ADMIN
  USER
}

enum EducationalStatus {
  ENROLLED
  GRADUATED
  LEFT
}

enum ReportStatus {
  PENDING
  RESOLVED
  CLOSED
}

enum SocialPlatform {
  FACEBOOK
  LINKEDIN
  INSTAGRAM
  TWITTER
  GITHUB
  BEHANCE
  DRIBBLE
  YOUTUBE
  OTHER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserPrivacy {
  PUBLIC
  PRIVATE
}

// Authentication
model PasswordToken {
  id String @id @default(cuid())
  token String
  email String
  expires DateTime
  @@unique([token, email])
}

model EmailToken {
  id String @id @default(cuid())
  token String
  email String
  expires DateTime
  password String?
  @@unique([token, email])
}

